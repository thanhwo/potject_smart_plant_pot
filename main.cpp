#define BLYNK_TEMPLATE_ID "TMPL6Sa9VdprT"
#define BLYNK_TEMPLATE_NAME "SmartPlantPot"
#define BLYNK_AUTH_TOKEN "53H5FdD6-H4C_K7ks67E8u7g2SORAplK"

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>

// ƒê·ªãnh nghƒ©a Virtual Pins tr√™n Blynk
#define VIRTUAL_TEMP V0
#define VIRTUAL_HUMID V1                      
#define VIRTUAL_MOIST V2                      
#define VIRTUAL_LED V3
#define VIRTUAL_PUMP V4

char ssid[32] = "";
char password[32] = "";
char auth[] = BLYNK_AUTH_TOKEN;

// Bi·∫øn c·∫£m bi·∫øn v√† b∆°m
int temperature, humidity, moisture;
bool pumpState = false;
unsigned long lastPumpTime = 0;
unsigned long lastReadTime = 0;
#define PUMP_DELAY 5000  // 5 gi√¢y
#define LED_PIN 4
#define DHTPIN 5
#define DHTTYPE DHT11
#define PUMP_PIN 18
const int moisturePin = 34;
DHT dht(DHTPIN, DHTTYPE);

// H√†m nh·∫≠p WiFi t·ª´ Serial Monitor
void getWiFiCredentials() {
    Serial.println("\nNh·∫≠p t√™n WiFi: ");
    while (!Serial.available()) { }
    String ssidInput = Serial.readStringUntil('\n');
    ssidInput.trim();
    ssidInput.toCharArray(ssid, sizeof(ssid));

    Serial.println("Nh·∫≠p m·∫≠t kh·∫©u WiFi: ");
    while (!Serial.available()) { }
    String passwordInput = Serial.readStringUntil('\n');
    passwordInput.trim();
    passwordInput.toCharArray(password, sizeof(password));
}

// K·∫øt n·ªëi WiFi
void connectToWiFi() {
    Serial.print("ƒêang k·∫øt n·ªëi WiFi...");
    WiFi.begin(ssid, password);
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 30) {
        delay(500);
        Serial.print(".");
        attempts++;
    }
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n‚úÖ K·∫øt n·ªëi WiFi th√†nh c√¥ng!");
        Serial.print("üì° IP: ");
        Serial.println(WiFi.localIP());
    } else {
        Serial.println("\n‚ùå K·∫øt n·ªëi WiFi th·∫•t b·∫°i. Kh·ªüi ƒë·ªông l·∫°i ESP32...");
        WiFi.disconnect();
        delay(1000);
        ESP.restart();
    }
}

// Ki·ªÉm tra k·∫øt n·ªëi WiFi & Blynk
void checkWiFiConnection() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi WiFi! ƒêang th·ª≠ l·∫°i...");
        WiFi.disconnect();
        WiFi.reconnect();
        int retry = 0;
        while (WiFi.status() != WL_CONNECTED && retry < 20) {
            delay(500);
            Serial.print(".");
            retry++;
        }
        if (WiFi.status() == WL_CONNECTED) {
            Serial.println("\n‚úÖ K·∫øt n·ªëi WiFi l·∫°i th√†nh c√¥ng!");
        } else {
            Serial.println("\n‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i. Ch·ªù 30 gi√¢y r·ªìi th·ª≠ l·∫°i...");
            delay(30000);
        }
    }
    if (!Blynk.connected()) {
        Serial.println("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi Blynk! ƒêang th·ª≠ l·∫°i...");
        Blynk.begin(auth, ssid, password);
    }
}

// ƒêi·ªÅu khi·ªÉn m√°y b∆°m
void controlPump() {
    if (moisture < 25 && !pumpState) {
        digitalWrite(PUMP_PIN, HIGH);
        pumpState = true;
        lastPumpTime = millis();
        Serial.println("üü¢ B·∫≠t m√°y b∆°m - ƒê·∫•t r·∫•t kh√¥!");
    } 
    else if (moisture > 65 && pumpState) {
        digitalWrite(PUMP_PIN, LOW);
        pumpState = false;
        lastPumpTime = millis();
        Serial.println("üî¥ T·∫Øt m√°y b∆°m - ƒê·∫•t ƒë·ªß ·∫©m!");
    }
    Blynk.virtualWrite(VIRTUAL_PUMP, pumpState ? 1 : 0);
}

void setup() {
    Serial.begin(115200);
    pinMode(LED_PIN, OUTPUT);
    pinMode(PUMP_PIN, OUTPUT);
    digitalWrite(LED_PIN, LOW);
    dht.begin();

    getWiFiCredentials();
    connectToWiFi();
    Blynk.begin(auth, ssid, password);
}

void loop() {
    Blynk.run();
    checkWiFiConnection();

    if (millis() - lastReadTime > 5000) {
        lastReadTime = millis();

        moisture = map(analogRead(moisturePin), 4095, 0, 0, 100);
        temperature = dht.readTemperature();
        humidity = dht.readHumidity();

        Serial.printf("üå° Nhi·ªát ƒë·ªô: %d¬∞C\nüíß ƒê·ªô ·∫©m kh√¥ng kh√≠: %d%%\nüå± ƒê·ªô ·∫©m ƒë·∫•t: %d%%\n", 
                      temperature, humidity, moisture);

        controlPump();
        Blynk.virtualWrite(VIRTUAL_TEMP, temperature);
        Blynk.virtualWrite(VIRTUAL_HUMID, humidity);
        Blynk.virtualWrite(VIRTUAL_MOIST, moisture);
    }
}
